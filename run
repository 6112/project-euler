#!/usr/bin/python

from sys import argv
from importlib import import_module

import timeit

def main ():
    if len (argv) <= 1:
        print ('Must supply a problem number.')
        return
    try:
        problem = int (argv [1])
    except ValueError:
        print (argv [1] + ' is not a valid integer.')
        return
    if int (argv [1]) <= 0:
        print (argv [1] + ' is not greater than or equal to one.')
    try:
        module = import_module ('problems.%03d' % problem)
    except ImportError as error:
        print ('No solution for problem #' + argv [1] + '.')
        return
    if not module.euler:
        print ('Solution for problem #' + argv [1] + ' is invalid.')
        return
    title = "(problem title missing)"
    if problem in problem_descriptions:
        title = problem_descriptions[problem]
    print('Solving problem #{0}: {1}.'.format(problem, title))
    print('Calculating (this may take some time)...')
    before = timeit.default_timer()
    result = module.euler ()
    after = timeit.default_timer()
    print('The answer for problem #{0} is {1}.'.format(problem, result))
    print('Calculation took {0:.3f} seconds.'.format(after - before))

problem_descriptions = {
        1 : "multiples of 3 and 5",
        2 : "even Fibonacci numbers",
        3 : "largest prime factor",
        4 : "largest palindrome product",
        5 : "smallest multiple",
        6 : "sum square difference",
        7 : "10001st prime",
        8 : "largest product in a  series",
        9 : "special pythagorean triplet",
        10: "summation of primes",
        11: "largest product in a grid",
        12: "highly divisible triangular number",
        13: "large sum",
        14: "longest Collatz sequence",
        15: "lattice paths",
        16: "power digit sum",
        17: "number letter counts",
        18: "maximum path sum I",
        19: "counting sundays",
        20: "factorial digit sum",
        21: "amicable numbers",
        22: "names scores",
        23: "non-abundant sums",
        24: "lexicographic permutations",
        25: "1000-digit Fibonacci number",
        26: "reciprocal cycles",
        27: "quadratic primes",
        28: "number spiral diagonals",
        29: "distinct powers",
        30: "digit fifth power",
        31: "coin sums",
        32: "pandigital products",
        33: "digit cancelling fractions",
        34: "digit factorials",
        35: "circular primes",
        36: "double-base palindromes",
        37: "truncatable primes",
        38: "pandigital primes",
        39: "integer right triangles",
        40: "champernowne's constant",
        41: "pandigital primes",
        42: "coded triangle numbers",
        43: "sub-string divisibility",
        44: "pentagon numbers",
        45: "triangular, pentagonal, and hexagonal",
        46: "goldbach's other conjecture",
        47: "distinct prime factors",
        48: "self powers",
        49: "prime permutations",
        50: "consecutive prime sum",
        51: "prime digit replacements",
        52: "permuted multiples",
        53: "combinatoric selections",
        54: "poker hands",
        55: "lychrel numbers",
        56: "powerful digit sum",
        57: "square root convergents",
        58: "spiral primes",
        59: "xOR decryption",
        60: "prime pair sets",
        61: "cyclical figurate numbers",
        62: "cubic permutations",
        63: "powerful digit counts",
        64: "odd period square roots",
        65: "convergents of e",
        66: "diophantine equation",
        67: "maximum path sum II",
        68: "magic 5-gon ring",
        69: "totient maximum",
        70: "totient permutation",
        71: "ordered fractions",
        72: "counting fractions",
        73: "counting fractions in a range",
        74: "digit factorial chains",
        75: "singular integer right triangles",
        76: "counting summations",
        77: "prime summations",
        78: "coin partitions",
        79: "passcode derivation",
        80: "square root digital expansion",
        81: "path sum: two ways",
        82: "path sum: three ways",
        83: "path sum: four ways"
}

if __name__ == '__main__':
    main ()
